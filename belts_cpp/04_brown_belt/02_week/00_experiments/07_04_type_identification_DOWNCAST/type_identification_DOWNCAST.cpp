#include <iomanip>
#include <iostream>
#include <typeinfo>

class A {
   private:
    int x{};
};

class B : public A {
   private:
    int y{};
    int z{};
};

int main() {
    // повышающее приведение типа (UPCAST) при открытом наследовании всегда безопасно
    B b;         // создаем объект производного типа
    A* pA = &b;  // заносим адрес этого объекта в указатель на базовый класс (тип)
    A& rA = b;   // сопоставляем ссылку базового типа объекту производного типа

    // ...
    // поработали, теперь хотим восстановить реальный тип указателя
    // B* pB = pA;  // error: invalid conversion from ‘A*’ to ‘B*’

    // НЕБЕЗОПАСНО: заставляем компилятор на свой страх и риск осуществить преобразование типов ЯВНО
    B* pB = static_cast<B*>(pA);  
    return 0;
}
